//
//  loginWorker.swift
//  BrunoCcySantander
//
//  Created by Bruno Chen on 16/06/20.
//  Copyright (c) 2020 Bruno Chen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class LoginWorker {
    var localValitation: LocalInputsValidationProtocol?
    var bankAPINetwork: BankAPINetworkProtocol?
    var keychainservice: KeychainServiceProtocol?
    
    func fetchUserData(user: String, password: String, completionHandler: @escaping (UserData?) -> Void) {
        localValitation = localValitation ?? LocalInputsValidation()
        bankAPINetwork = bankAPINetwork ?? BankAPINetwork()
    
        if localValitation!.isValidInputs(user: user, password: password) {
            
            DispatchQueue.main.async {
                self.bankAPINetwork!.fetchUser(user: user, password: password) { (result: Result<UserData, APIServiceError>) in
                    
                    switch result {
                        case .success(let userData):
                            completionHandler(userData)
                            self.saveLogin(userID: user, password: password)
                        case .failure(let error):
                            print(error.localizedDescription)
                            completionHandler (nil)
                    }
                }
            }
        } else {
            completionHandler (nil)
        }
  }
    
    func saveLogin(userID: String, password: String) {
        keychainservice = keychainservice ?? UserKeychainService()
        keychainservice!.saveUserPassword(userID: userID, password: password)
    }
    
    func loadLogin() -> (userID: String?, password: String?) {
        keychainservice = keychainservice ?? UserKeychainService()
        let login = keychainservice!.getUserPassword()
        return login
    }
}
