//
//  LoginWorkerTests.swift
//  BrunoCcySantander
//
//  Created by Bruno Chen on 17/06/20.
//  Copyright (c) 2020 Bruno Chen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import BrunoCcySantander
import XCTest

class LoginWorkerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: LoginWorker!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupLoginWorker()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupLoginWorker()
  {
    sut = LoginWorker()
  }
  
  // MARK: Test doubles
    class BankAPISpy: BankAPINetworkProtocol
    {
        var userData = UserData(userAccount: UserAccount(userID: 10, name: "name", bankAccount: "bankAccount", agency: "agency", balance: 1.0), error: ErrorUserAPI())
        
        func fetchUser(user: String, password: String, completionHandler: @escaping (UserData?, UserStoreError?) -> Void) {
            completionHandler(userData, nil)
        }
        
        
        var statementListData = StatementListData(statementList: [StatementList(title: "title", desc: "desc", date: "date", value: 1.0)], error: ErrorAPI())
        
        func fetchStatementList(userID: String, completionHandler: @escaping (StatementListData?, UserStoreError?) -> Void) {
            completionHandler(statementListData, nil)
        }
    }
    
    class LocalValitationSpy: LocalInputsValidationProtocol
    {
        
      var serviceSomethingCalled = false
        
      func isValidInputs(user: String?, password: String?) -> Bool {
          serviceSomethingCalled = true
        return serviceSomethingCalled
      }
    }
    
    class KeychainSpy: KeychainServiceProtocol
    {
        var serviceSomethingCalled = false
        
        func saveUserPassword(userID: String, password: String) {
            serviceSomethingCalled = true
        }
        
        func getUserPassword() -> (userID: String?, password: String?) {
            serviceSomethingCalled = true
            return (userID: "user", password: "123")
        }
        
        func removeUserPassword() {
            serviceSomethingCalled = true
        }
    }
  
  // MARK: Tests
  
  func testFetchUserData()
  {
    // Given
    let apiSpy = BankAPISpy()
    let valitationSpy = LocalValitationSpy()
    let keychainSpy = KeychainSpy()
    sut.bankAPINetwork = apiSpy
    sut.localValitation = valitationSpy
    sut.keychainservice = keychainSpy

    // When
    sut.fetchUserData(user: "user", password: "123", completionHandler: { (userData) in
        XCTAssertFalse(keychainSpy.serviceSomethingCalled, "testFetchUserData(request:) should ask the presenter to format the result")
    })
  }
}
