//
//  UserProfileViewControllerTests.swift
//  BrunoCcySantander
//
//  Created by Bruno Chen on 17/06/20.
//  Copyright (c) 2020 Bruno Chen. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import BrunoCcySantander
import XCTest

class UserProfileViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: UserProfileViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupUserProfileViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupUserProfileViewController()
  {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = (storyboard.instantiateViewController(withIdentifier: "UserProfileViewController") as! UserProfileViewController)
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class UserProfileBusinessLogicSpy: UserProfileBusinessLogic
  {

    
    var doSomethingCalled = false
    
    func getUserInfo() {
        doSomethingCalled = true
    }
    
    func getStatementListInfo(request: UserProfile.StatementListInfo.Request) {
        doSomethingCalled = true
    }
    
    func logoutUser() {
        doSomethingCalled = true
    }
  }
  
  // MARK: Tests
  
  func testShouldDoSomethingWhenViewIsLoaded()
  {
    // Given
    let spy = UserProfileBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.doSomethingCalled, "viewDidLoad() should ask the interactor to do something")
  }
  
  func testDisplayUserInfo()
  {
    // Given
    let spy = UserProfileBusinessLogicSpy()
    sut.interactor = spy
    let viewModel = UserProfile.UserInfo.ViewModel(name: "name", bankAgencyAccount: "123", balance: "balance")
    
    // When
    loadView()
    sut.displayUserInfo(viewModel: viewModel)
    
    // Then
    XCTAssertEqual(sut.lbName.text, "name", "displayUserInfo(viewModel:) should update the name text field")
  }
}
